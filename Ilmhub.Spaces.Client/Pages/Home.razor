@page "/"
@using Ilmhub.Spaces.Client.Models
@using Ilmhub.Spaces.Client.Interfaces
@using System.Text.RegularExpressions
@using MudBlazor
@inject IDialogService DialogService
@inject ILeadService LeadService

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-4">
    <MudStack Row="true" AlignItems="@AlignItems.Center" Spacing="3">
        <MudButton Variant="Variant.Outlined"
                   EndIcon="@Icons.Material.Filled.Add"
                   Color="Color.Tertiary"
                   Class="ma-4">
            Qo'shish
        </MudButton>
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Qidirish"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudMenu FullWidth="false" Class="menu-position">
            <ActivatorContent>
                <MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Status</MudChip>
            </ActivatorContent>
            <ChildContent>
                @foreach (var column in new[] { "Barchasi", "Yangi Lidlar", "Bog'lanilgan", "Kuzatuvda", "Yakuniy Holat" })
                {
                    <MudMenuItem Icon="@GetIconForColumn(column)" Style="@($"color: {GetColorForColumn(column)};")" @onclick="() => SetCurrentStatus(column)">@column</MudMenuItem>
                }
            </ChildContent>
        </MudMenu>
        <MudSpacer />
        <MudSpacer />
        <MudSpacer />
        <MudSpacer />
    </MudStack>

    <div class="hide-scrollbar" style="overflow-x: auto; white-space: nowrap;">
        <MudDropContainer T="Lead" @ref="dropContainer" Items="@filteredLeads" ItemsSelector="@((item,column) => GetColumnForStatus(item.Status) == column)" ItemDropped="LeadUpdated" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>
            @foreach (var column in new[] { "Yangi Lidlar", "Bog'lanilgan", "Kuzatuvda", "Yakuniy Holat" })
            {
                <MudPaper Elevation="0" Style="height: calc(100vh - 175px); flex: 1; display: flex; flex-direction: column; min-width: 200px; max-width: 400px;" Class="pa-4 mx-1 transparent rounded-lg">
                    <MudList T="Lead" Style="flex-grow: 1; overflow-y: auto;" Class="d-flex flex-column mud-height-full">
                        <MudListSubheader>
                            <MudToolBar Gutters="false" Class="py-2">
                                <div class="column" style="background-color:@GetColorForColumn(column); height: 4px; margin-bottom: 5px ; width: 100%;">
                                </div>
                            </MudToolBar>
                        </MudListSubheader>
                        <MudDropZone T="Lead" Identifier="@column" Class="flex-grow-1 overflow-y-auto hide-scrollbar" AllowReorder="true"/>
                    </MudList>
                </MudPaper>
            }
            </ChildContent>
            <ItemRenderer>
                <MudCard Class="ma-4 rounded-lg" Elevation="5" @onclick="() => ShowLeadDetails(context)">
                    <MudCardContent>
                        <MudStack Row="true" AlignItems="@AlignItems.Center">
                            <MudMenu Dense="true" MaxHeight="200">
                                <ActivatorContent>
                                    <MudChip T="string" Variant="Variant.Text" Color="@GetColorForStatus(context.Status)" Size="Size.Small">@context.Status</MudChip>
                                </ActivatorContent>
                                <ChildContent>
                                    @foreach (LeadStatus status in Enum.GetValues(typeof(LeadStatus)))
                                    {
                                        <MudMenuItem OnClick="@(() => UpdateLeadStatus(context, status))">@status</MudMenuItem>
                                    }
                                </ChildContent>
                            </MudMenu>
                            <MudText Typo="Typo.body2">@(context.Name?.Substring(0, Math.Min(context.Name?.Length ?? 0, 20)))</MudText>
                        </MudStack>
                        <MudStack>
                            <MudStack Row="true" Justify="@Justify.FlexStart" AlignItems="@AlignItems.Start">
                                <MudIcon Color="Color.Info" Style="font-size: small;" Icon="@Icons.Material.Rounded.LocalPhone" />
                                <MudText Typo="Typo.body2">@FormatPhoneNumber(context.Phone)</MudText>
                                <MudText Color="Color.Tertiary" Typo="Typo.body2">@(context.ModifiedAt?.ToString("dd MMM HH:mm") ?? context.CreatedAt.ToString("dd MMM HH:mm"))</MudText>
                            </MudStack>
                        </MudStack>
                    </MudCardContent>
                </MudCard> 
            </ItemRenderer>
        </MudDropContainer>
    </div>
</MudContainer>

@code {
    private MudDropContainer<Lead> dropContainer = default!;
    private List<Lead> leads = new();
    private string searchQuery = "";
    private string currentStatus = "Barchasi";
    private List<Lead> filteredLeads = new();
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; } 
    private void Cancel()
    {
        if (MudDialog != null)
        {
            MudDialog.Cancel();
        }
    }
    private Dictionary<int, bool> leadDetailsVisibility = new Dictionary<int, bool>();

    protected override async Task OnInitializedAsync()
    {
        leads = (await LeadService.GetLeadsAsync()).OrderByDescending(l => l.ModifiedAt).ToList();
        filteredLeads = new List<Lead>(leads);
    }

    private void ShowLeadDetails(Lead lead)
    {
        DialogService.Show<LeadDetailsDialog>("Lead Details", new DialogParameters { ["Lead"] = lead });
    }

    private void OnSearch(string text)
    {
        searchQuery = text;

        if (string.IsNullOrEmpty(text))
        {
            filteredLeads = new List<Lead>(leads);
        }
        else
        {
            filteredLeads = leads.Where(l =>
                (string.IsNullOrEmpty(currentStatus) || currentStatus == "Barchasi" || GetColumnForStatus(l.Status) == currentStatus) &&
                (l.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true ||
                 l.Phone?.Contains(searchQuery) == true))
                .ToList();
        }

        StateHasChanged();
    }

    private void SetCurrentStatus(string status)
    {
        currentStatus = status;
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filteredLeads = leads.Where(l =>
                (currentStatus == "Barchasi" || GetColumnForStatus(l.Status) == currentStatus) &&
                (l.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true ||
                 l.Phone?.Contains(searchQuery) == true))
                .ToList();
        }
        else
        {
            filteredLeads = new List<Lead>(leads);
        }

        StateHasChanged();
    }

    private async Task LeadUpdated(MudItemDropInfo<Lead> dropInfo)
    {
        if (dropInfo.Item != null)
        {
            dropInfo.Item.Status = GetStatusForColumn(dropInfo.DropzoneIdentifier);
            dropInfo.Item.ModifiedAt = DateTime.Now;

            await LeadService.UpdateLeadAsync(dropInfo.Item);
            leads = leads.OrderByDescending(l => l.ModifiedAt).ToList();
            StateHasChanged();
        }
    }

    private async Task UpdateLeadStatus(Lead lead, LeadStatus newStatus)
    {
        lead.Status = newStatus;
        lead.ModifiedAt = DateTime.Now;
        await LeadService.UpdateLeadAsync(lead);
        leads = leads.OrderByDescending(l => l.ModifiedAt).ToList();
        StateHasChanged();
    }

    private string GetColumnForStatus(LeadStatus status)
    {
        return status switch
        {
            LeadStatus.New => "Yangi Lidlar",
            LeadStatus.Phone or LeadStatus.Contacted => "Bog'lanilgan",
            LeadStatus.Recontact or LeadStatus.Incomplete or LeadStatus.Registered or LeadStatus.AttendedTrialLesson => "Kuzatuvda",
            LeadStatus.Acquired or LeadStatus.NotAcquired or LeadStatus.Lost => "Yakuniy Holat",
            _ => "Yangi Lidlar"
        };
    }

    private LeadStatus GetStatusForColumn(string column)
    {
        return column switch
        {
            "Yangi Lidlar" => LeadStatus.New,
            "Bog'lanilgan" => LeadStatus.Contacted,
            "Kuzatuvda" => LeadStatus.Recontact,
            "Yakuniy Holat" => LeadStatus.Acquired,
            _ => LeadStatus.New
        };
    }

    private string GetColorForColumn(string column)
    {
        return column switch
        {
            "Barchasi" => "default",
            "Yangi Lidlar" => "dodgerblue",
            "Bog'lanilgan" => "orange",
            "Kuzatuvda" => "mediumvioletred",
            "Yakuniy Holat" => "seagreen",
            _ => "Barchasi"
        };
    }

    private string GetIconForColumn(string column)
    {
        return column switch
        {
            "Barchasi" => Icons.Material.Filled.SelectAll,
            "Yangi Lidlar" => Icons.Material.Filled.NewLabel,
            "Bog'lanilgan" => Icons.Material.Filled.Phone,
            "Kuzatuvda" => Icons.Material.Filled.Visibility,
            "Yakuniy Holat" => Icons.Material.Filled.Done,
            _ => Icons.Material.Filled.NewLabel
        };
    }

    private Color GetColorForStatus(LeadStatus status)
    {
        return status switch
        {
            LeadStatus.New => Color.Info,
            LeadStatus.Phone => Color.Warning,
            LeadStatus.Contacted => Color.Primary,
            LeadStatus.Recontact => Color.Secondary,
            LeadStatus.Incomplete => Color.Error,
            LeadStatus.Registered => Color.Success,
            LeadStatus.AttendedTrialLesson => Color.Tertiary,
            LeadStatus.Acquired => Color.Success,
            LeadStatus.NotAcquired => Color.Error,
            LeadStatus.Lost => Color.Dark,
            _ => Color.Default
        };
    }

    public static string FormatPhoneNumber(string? input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return string.Empty;
        }

        // Regular expression to match and capture digits
        var regex = new Regex(@"(\d{2})[\s\-]?(\d{3})[\s\-]?(\d{4})");

        // Replace the matched digits with the desired format
        var result = regex.Replace(input, "$1 $2 $3");

        // Handle cases where input doesn't match the pattern
        if (result == input)
        {
            return input; // Return original input if it doesn't match the pattern
        }

        return result;
    }
}