@page "/"
@using Ilmhub.Spaces.Client.Models
@using Ilmhub.Spaces.Client.Interfaces
@using System.Text.RegularExpressions
@using MudBlazor
@inject IDialogService DialogService
@inject ILeadService LeadService

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-4">
    <MudStack Row="true" AlignItems="@AlignItems.Center" Spacing="5" class="ml-2">
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Qidirish"
                      FullWidth="false"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudGrid>
            <MudItem class="mb-4">
                <div class="w-200">
                    <MudAutocomplete T="string" Label="Qiziqqan kurslari" @bind-Value="Value1" SearchFunc="@Search1"
                                    ResetValueOnEmptyText="@resetValueOnEmptyText"
                                    CoerceText="@coerceText" CoerceValue="@coerceValue"
                                    />
                </div>
            </MudItem>
            <MudItem class="mb-4">
                <div class="w-200">
                <MudAutocomplete T="string" Label="Lead source" @bind-Value="Value2" SearchFunc="@Search2"
                                ResetValueOnEmptyText="@resetValueOnEmptyText"
                                CoerceText="@coerceText" CoerceValue="@coerceValue"
                                />
                </div>
            </MudItem>
            <MudItem>
                <div class="w-205">
            <MudDateRangePicker @ref="_picker" Label="Maximum 1 month" @bind-DateRange="_dateRange" 
                                PickerVariant="PickerVariant.Dialog">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.ClearAsync())">Clear</MudButton>
                    <MudButton OnClick="@(() => _picker.CloseAsync(false))">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(async () => { await _picker.CloseAsync(); Search3(); })">Ok</MudButton>
                </PickerActions>
            </MudDateRangePicker>
            </div>
        </MudItem>
        <MudIconButton Icon="@Icons.Material.Filled.FilterListOff" 
                       Color="Color.Error" 
                       OnClick="ClearFilters" 
                       Title="Clear all filters"
                       class="mt-5"/>
        </MudGrid>
        
        <MudSpacer />
        <MudSpacer />
        <MudSpacer />
        <MudSpacer />
        
        <MudButton StartIcon="@Icons.Material.Filled.Add" Class="rounded-lg py-2 pa-4 mr-2">Qo'shish</MudButton>
    </MudStack>

    <div class="hide-scrollbar" style="overflow-x: auto; white-space: nowrap;">
        <MudDropContainer T="Lead" @ref="dropContainer" Items="@filteredLeads" ItemsSelector="@((item,column) => GetColumnForStatus(item.Status) == column)" ItemDropped="LeadUpdated" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>
            @foreach (var column in new[] { "Yangi Lidlar", "Bog'lanilgan", "Kuzatuvda", "Yakuniy Holat" })
            {
                <MudPaper Elevation="0" Style="height: calc(100vh - 175px); flex: 1; display: flex; flex-direction: column; min-width: 200; max-width: 400px;" Class="mx-1 transparent rounded-lg">
                    <MudList T="Lead" Style="flex-grow: 1; overflow-y: auto;" Class="d-flex flex-column mud-height-full">
                        <MudListSubheader Class="d-flex align-items-center">
                            <MudText Typo="Typo.h6" Class="mt-0">@column</MudText>
                            <MudSpacer />
                            <MudMenu Icon="@Icons.Material.Rounded.MoreVert" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="d-flex flex-column" PopoverClass="mud-elevation-25" class="mt-n2">
                                <MudButton Size="Size.Small" Color="Color.Default" OnClick="@(() => ToggleSort(column))" StartIcon="@Icons.Material.Filled.FilterList">
                                    Sort @((!columnSortDirections.ContainsKey(column) || columnSortDirections[column] == SortDirection.Descending) ? "↑" : "↓")
                                </MudButton>
                                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.RemoveRedEye">Show invisible</MudButton>
                            </MudMenu>
                        </MudListSubheader>
                        <MudDropZone T="Lead" 
                                     Identifier="@column" 
                                     Class="flex-grow-1 overflow-y-auto hide-scrollbar" 
                                     AllowReorder="true"
                                     Items="@(columnLeads.ContainsKey(column) 
                                             ? columnLeads[column] 
                                             : filteredLeads.Where(l => GetColumnForStatus(l.Status) == column))"/>
                    </MudList>
                </MudPaper>
            }
            </ChildContent>
            <ItemRenderer>
                <MudCard Class="ma-4 my-4" @onclick="() => ShowLeadDetails(context)" Elevation="1">
                    <MudCardContent>
                        <MudStack Row="true" AlignItems="@AlignItems.Center">
                            <MudMenu Dense="true" MaxHeight="200">
                                <ActivatorContent>
                                    <MudChip T="string" Variant="Variant.Text" Color="@GetColorForStatus(context.Status)" Size="Size.Small">@context.Status</MudChip>
                                </ActivatorContent>
                                <ChildContent>
                                    @foreach (LeadStatus status in Enum.GetValues(typeof(LeadStatus)))
                                    {
                                        <MudMenuItem OnClick="@(() => UpdateLeadStatus(context, status))">@status</MudMenuItem>
                                    }
                                </ChildContent>
                            </MudMenu>
                            <MudText Typo="Typo.body2">@(context.Name?.Substring(0, Math.Min(context.Name?.Length ?? 0, 20)))</MudText>
                        </MudStack>
                        <MudStack>
                            <MudStack Row="true" Justify="@Justify.FlexStart" AlignItems="@AlignItems.Start">
                                <MudIcon class="pb-n3" Color="Color.Info" Style="font-size: small;" Icon="@Icons.Material.Rounded.LocalPhone" />
                                <MudText Typo="Typo.body2">@FormatPhoneNumber(context.Phone)</MudText>
                                <MudText Color="Color.Tertiary" Typo="Typo.body2">@(context.ModifiedAt?.ToString("dd MMM HH:mm") ?? context.CreatedAt.ToString("dd MMM HH:mm"))</MudText>
                            </MudStack>
                        </MudStack>
                    </MudCardContent>
                </MudCard> 
            </ItemRenderer>
        </MudDropContainer>
    </div>
</MudContainer>

<style>
    .w-200 {
        width: 200px;
    }
</style>